{"version":3,"sources":["ui/table.tsx","sku-store.ts","ui/search.tsx","App.tsx","utils.ts","filters.ts","index.tsx"],"names":["Table","React","memo","tableHeadings","extraClass","children","className","map","heading","key","TableRow","TableCell","TableRowLikeHeading","columnCount","colSpan","skusGroupByCategories","category","price","stocked","name","reduce","acc","data","sku","entry","find","items","concat","push","Search","placeholder","inputProps","type","SkuFormNames","Utils","value","Filters","skuGroupByCategories","filterItems","filter","App","tableHeadingsRef","useRef","useState","SKU_FILTERS_SEARCH","SKU_FILTER_IN_STOCK","skuFormValues","setSkuFormValues","onFormValueChange","useCallback","e","target","checked","searchFilterValue","inStockFilterValue","onChange","id","htmlFor","translate","current","filterSku","toLocaleLowerCase","includes","group","length","Fragment","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8213a67a.chunk.js","sourcesContent":["import React from \"react\";\n\ntype TableProps = {\n  tableHeadings: string[];\n  extraClass?: string;\n}\n\nexport const Table = React.memo<React.PropsWithChildren<TableProps>>(\n  function Table({tableHeadings, extraClass= \"\", children}) {\n    return <table className={`app-table ${extraClass}`}>\n      <thead>\n      <tr>\n        {\n          tableHeadings.map((heading, key) => {\n            return (\n              <th className=\"at_table-head\" key={key}>\n                {heading}\n              </th>\n            )\n          })\n        }\n      </tr>\n      </thead>\n      <tbody>\n      {children}\n      </tbody>\n    </table>\n  });\n\ntype TableRowsProps = { }\n\nexport const TableRow = React.memo<React.PropsWithChildren<TableRowsProps>>(function TableRow({children}) {\n  return (\n    <tr>\n      {children}\n    </tr>\n  )\n})\n\ntype TableCellProps = { }\n\nexport function TableCell({children}: React.PropsWithChildren<TableCellProps>) {\n  return <td>\n    {children}\n  </td>\n}\n\ntype TableRowLikeHeadingProps = {\n  columnCount: number;\n  extraClass?: string;\n}\n\nexport function TableRowLikeHeading({columnCount, extraClass = \"\", children}: React.PropsWithChildren<TableRowLikeHeadingProps>) {\n  return (\n    <tr className={`app-table-row-like-heading ${extraClass}`}>\n      {\n        <td className={`atrlh_cell`} colSpan={columnCount}> {children} </td>\n      }\n    </tr>\n  )\n}\n\n","interface Data {\n  category: string;\n  price: string;\n  stocked: boolean;\n  name: string;\n}\n\nexport const skus: Data[] = [\n  { category: \"Sporting Goods\", price: \"$49.99\", stocked: true, name: \"Football\" },\n  { category: \"Sporting Goods\", price: \"$9.99\", stocked: true, name: \"Baseball\" },\n  { category: \"Sporting Goods\", price: \"$29.99\", stocked: false, name: \"Basketball\" },\n  { category: \"Electronics\", price: \"$99.99\", stocked: true, name: \"iPod Touch\" },\n  { category: \"Electronics\", price: \"$399.99\", stocked: false, name: \"iPhone 5\" },\n  { category: \"Electronics\", price: \"$199.99\", stocked: true, name: \"Nexus 7\" }\n];\n\nexport interface Sku {\n  price: string;\n  stocked: boolean;\n  name: string;\n}\n\nexport interface DataGroupByCategories<T> {\n  category: string;\n  items: T[];\n}\n\nexport const skusGroupByCategories: DataGroupByCategories<Sku>[] = skus\n  .reduce<DataGroupByCategories<Sku>[]>((acc, data) => {\n    const { category, ...sku } = data;\n    const entry = acc.find((entry) => entry.category === data.category);\n    if (entry) {\n      entry.items = entry.items.concat(sku);\n    } else {\n      acc.push({\n        category,\n        items: [sku]\n      });\n    }\n    return acc;\n  }, []);","import React from \"react\";\n\ninterface SearchProps extends React.HTMLProps<HTMLInputElement> { }\n\nexport function Search({ placeholder = \"Search...\", ...inputProps }: SearchProps) {\n  return <input placeholder={placeholder} {...inputProps} type=\"text\"/>\n}\n","import React from 'react';\nimport { Table, TableCell, TableRow, TableRowLikeHeading } from \"./ui/table\";\nimport { Sku, skusGroupByCategories } from \"./sku-store\";\nimport { Search } from \"./ui/search\";\nimport { Utils } from \"./utils\";\nimport { Filters } from \"./filters\";\n\nenum SkuFormNames {\n  SKU_FILTERS_SEARCH = 'sku-filters-search',\n  SKU_FILTER_IN_STOCK = 'sku-filter-in-stock'\n}\n\ntype SkuFormValues = Record<SkuFormNames, string | boolean>;\n\nfunction App() {\n  const tableHeadingsRef = React.useRef<string[]>([\"Name\", \"Price\"]);\n\n  const [skuFormValues, setSkuFormValues] = React.useState<SkuFormValues>({\n    [SkuFormNames.SKU_FILTERS_SEARCH]: \"\",\n    [SkuFormNames.SKU_FILTER_IN_STOCK]: false\n  });\n\n  const onFormValueChange = React.useCallback((e) => {\n    const target = e.target;\n    const {name} = target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n\n    setSkuFormValues({\n      ...skuFormValues,\n      [name]: value\n    })\n  }, [skuFormValues, setSkuFormValues]);\n\n  const searchFilterValue = skuFormValues[SkuFormNames.SKU_FILTERS_SEARCH];\n  const inStockFilterValue = skuFormValues[SkuFormNames.SKU_FILTER_IN_STOCK];\n\n  /**\n   *  Filter Function.\n   *  - Firstly, filter by search-string\n   *  - Secondly, optional filter by in-stock flag.\n   *  -- If in-stock checked match all entries with \"stocked\" is `true`\n   *  -- Else (in-stock is not checked) skip filter (return true)\n   * @param sku\n   */\n  const filterItems = (sku: Sku) => {\n    return sku[\"name\"].toLocaleLowerCase().includes((searchFilterValue as string).toLocaleLowerCase())\n      && (inStockFilterValue ? sku[\"stocked\"] === inStockFilterValue : true)\n  }\n\n  return (\n    <div className={`container`}>\n      <div className={\"flex-center\"}>\n        <form className=\"sku-filters\">\n          <div className=\"form-group\">\n            <Search\n              className={`${SkuFormNames.SKU_FILTERS_SEARCH} text-mid`}\n              value={skuFormValues[SkuFormNames.SKU_FILTERS_SEARCH] as string}\n              onChange={onFormValueChange}\n              name={SkuFormNames.SKU_FILTERS_SEARCH}\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              className={`${SkuFormNames.SKU_FILTER_IN_STOCK}`}\n              checked={skuFormValues[SkuFormNames.SKU_FILTER_IN_STOCK] as boolean}\n              name={SkuFormNames.SKU_FILTER_IN_STOCK}\n              id=\"sku-filter-in-stock\"\n              type=\"checkbox\"\n              onChange={onFormValueChange}\n            />\n            <label htmlFor=\"sku-filter-in-stock\">\n              {Utils.translate(\"Only show products in stock\")}\n            </label>\n          </div>\n        </form>\n      </div>\n\n      <div className={\"flex-center\"}>\n        <Table extraClass={\"skus-table\"} tableHeadings={tableHeadingsRef.current}>\n          {\n            Filters\n              .filterSku(skusGroupByCategories, filterItems)\n              .filter((group) => {\n                return group.items.length > 0 // show only categories with items\n              })\n              .map((group) => {\n                return (\n                  <React.Fragment key={group.category}>\n                    <TableRowLikeHeading columnCount={2}>\n                      {group.category}\n                    </TableRowLikeHeading>\n                    {\n                      group.items.map((sku) => (\n                        <TableRow key={sku.name}>\n                          <TableCell>\n                            <span className={!sku.stocked ? 'skus-table-out-of-stock' : ''}>{sku.name}</span>\n                          </TableCell>\n                          <TableCell>\n                            {sku.price}\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    }\n                  </React.Fragment>\n                )\n              })\n          }\n        </Table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export class Utils {\n  /**\n   * temporary wrapper for translation\n   * @param value\n   */\n  static translate(value: string) {\n    return value\n  }\n\n}\n","import { Sku, DataGroupByCategories } from \"./sku-store\";\n\nexport class Filters {\n  static filterSku(skuGroupByCategories: DataGroupByCategories<Sku>[], filterItems: (sku: Sku) => boolean) {\n    return skuGroupByCategories\n      .map((entry) => {\n        return {\n          category: entry.category,\n          items: entry.items.filter(filterItems)\n        }\n      })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}